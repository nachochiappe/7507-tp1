TestCase subclass: #PruebasCalendario	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Tests'!!PruebasCalendario methodsFor: 'testsAlumno' stamp: 'IgnacioChiappe 9/29/2018 15:05'!test10AgregarEventoSimpleParaPersonaInexistente	| calendario |	calendario := Calendario new.		self deny: (calendario existePersona: 'Ignacio').		self should: [calendario agregarEventoConNombre: 'Siesta'               invitados: #('Ignacio')               enAnio: 2019 mes: 5 dia: 4 hora: 10.] raise: InvitadoNoExisteError. ! !!PruebasCalendario methodsFor: 'testsAlumno' stamp: 'IgnacioChiappe 9/30/2018 11:32'!test19AgregarEventoSimpleParaMuchosInvitados	| calendario invitados |	invitados := OrderedCollection new.	invitados add: 'Ignacio'.	invitados add: 'Martin'.	invitados add: 'Agustina'.	invitados add: 'Fernando'.	invitados add: 'Virginia'.	invitados add: 'Juan'.	invitados add: 'Jose'.	invitados add: 'Pedro'.	invitados add: 'Luis'.	invitados add: 'Proyector'.	invitados add: 'Notebook'.	invitados add: 'Pizarra'.	calendario := Calendario new.	calendario agregarPersona: 'Ignacio'.	calendario agregarPersona: 'Martin'.	calendario agregarPersona: 'Agustina'.	calendario agregarPersona: 'Fernando'.	calendario agregarPersona: 'Virginia'.	calendario agregarPersona: 'Juan'.	calendario agregarPersona: 'Jose'.	calendario agregarPersona: 'Pedro'.	calendario agregarPersona: 'Luis'.	calendario agregarRecurso: 'Proyector'.	calendario agregarRecurso: 'Notebook'.	calendario agregarRecurso: 'Pizarra'.	calendario agregarEventoConNombre: 'Reunion'		invitados: invitados		enAnio: 2018 mes: 9 dia: 30 hora: 10.	self assert: (calendario estaOcupado: 'Pizarra' enAnio: 2018 mes: 9 dia: 30 hora: 10).! !!PruebasCalendario methodsFor: 'testsAlumno' stamp: 'IgnacioChiappe 9/29/2018 15:06'!test15PreguntarSiEstaOcupadoUnaPersonaORecursoInexistente    | calendario |	    calendario := Calendario new.	self should: [ calendario estaOcupado: 'Ignacio' enAnio: 2018 mes: 9 dia: 29  hora: 10 ] raise: InvitadoNoExisteError.! !!PruebasCalendario methodsFor: 'testsAlumno' stamp: 'IgnacioChiappe 9/29/2018 15:05'!test11AgregarEventoSemanalParaPersonaInexistente	| calendario |	calendario := Calendario new.		self deny: (calendario existePersona: 'Ignacio').		self should: [calendario agregarEventoSemanalConNombre: 'Evento'               semanas: 0               invitados: #('Ignacio')               enAnio: 2018 mes: 9 dia: 29 hora: 10.] raise: InvitadoNoExisteError. ! !!PruebasCalendario methodsFor: 'testsAlumno' stamp: 'IgnacioChiappe 9/29/2018 16:45'!test13AgregarEventoSemanalConCantidadSemanasMenorAUno    | calendario |	    calendario := Calendario new.	calendario agregarPersona: 'Ignacio'.	self should: [ calendario agregarEventoSemanalConNombre: 'Evento'               semanas: 0               invitados: #('Ignacio')               enAnio: 2018 mes: 9 dia: 29 hora: 10. ] raise: CantidadSemanasMenorAUnoError.! !!PruebasCalendario methodsFor: 'testsAlumno' stamp: 'IgnacioChiappe 9/30/2018 11:34'!test20AgregarEventoSemanalParaMuchosInvitados	| calendario invitados |	invitados := OrderedCollection new.	invitados add: 'Ignacio'.	invitados add: 'Martin'.	invitados add: 'Agustina'.	invitados add: 'Fernando'.	invitados add: 'Virginia'.	invitados add: 'Juan'.	invitados add: 'Jose'.	invitados add: 'Pedro'.	invitados add: 'Luis'.	invitados add: 'Proyector'.	invitados add: 'Notebook'.	invitados add: 'Pizarra'.	calendario := Calendario new.	calendario agregarPersona: 'Ignacio'.	calendario agregarPersona: 'Martin'.	calendario agregarPersona: 'Agustina'.	calendario agregarPersona: 'Fernando'.	calendario agregarPersona: 'Virginia'.	calendario agregarPersona: 'Juan'.	calendario agregarPersona: 'Jose'.	calendario agregarPersona: 'Pedro'.	calendario agregarPersona: 'Luis'.	calendario agregarRecurso: 'Proyector'.	calendario agregarRecurso: 'Notebook'.	calendario agregarRecurso: 'Pizarra'.	calendario agregarEventoSemanalConNombre: 'Reunion'		semanas: 4		invitados: invitados		enAnio: 2018 mes: 9 dia: 30 hora: 10.	self assert: (calendario estaOcupado: 'Pizarra' enAnio: 2018 mes: 10 dia: 7 hora: 10).! !!PruebasCalendario methodsFor: 'testsAlumno' stamp: 'IgnacioChiappe 9/29/2018 15:05'!test12AgregarEventoConNombreYaExistente	| calendario |	calendario := Calendario new.		self deny: (calendario existePersona: 'Ignacio').		calendario agregarPersona: 'Ignacio'.		calendario agregarEventoConNombre: 'Evento' invitados: #('Ignacio') enAnio: 2018 mes: 09 dia: 29 hora: 10.		self should: [calendario agregarEventoConNombre: 'Evento' invitados: #('Ignacio') enAnio: 2018 mes: 09 dia: 29 hora: 10] raise: NombreDeEventoYaExisteError.! !!PruebasCalendario methodsFor: 'testsAlumno' stamp: 'IgnacioChiappe 9/29/2018 15:06'!test16AgregarPersonaYaExistente	| calendario |		calendario := Calendario new.		calendario agregarPersona: 'Ignacio'.		self should: [calendario agregarPersona: 'Ignacio'.] raise: PersonaYaExisteError.! !!PruebasCalendario methodsFor: 'testsAlumno' stamp: 'IgnacioChiappe 9/29/2018 16:45'!test14AgregarEventoSemanalConCantidadSemanasMenorAUno    | calendario |	    calendario := Calendario new.	calendario agregarPersona: 'Ignacio'.	self should: [ calendario agregarEventoSemanalConNombre: 'Evento'               semanas: 0               invitados: #('Ignacio')               enAnio: 2018 mes: 9 dia: 29 hora: 10. ] raise: CantidadSemanasMenorAUnoError.! !!PruebasCalendario methodsFor: 'testsAlumno' stamp: 'IgnacioChiappe 9/29/2018 15:07'!test17AgregarRecursoYaExistente	| calendario |		calendario := Calendario new.		calendario agregarRecurso: 'Proyector'.		self should: [calendario agregarRecurso: 'Proyector'.] raise: RecursoYaExisteError.! !!PruebasCalendario methodsFor: 'testsAlumno' stamp: 'IgnacioChiappe 9/29/2018 15:07'!test18EliminarEventoInexistente	| calendario |		calendario := Calendario new.		self should: [calendario removerEvento: 'Evento'] raise: EventoInexistenteError.! !!PruebasCalendario methodsFor: 'test' stamp: 'TomasBustamante 9/16/2019 19:51'!test03AgregarEventoSemanal    | calendario |    calendario := Calendario new.    calendario agregarPersona: 'Pedro'.    calendario agregarEventoSemanalConNombre: 'Siesta'               semanas: 3               invitados: #('Pedro') " coleccion de un string "               enAnio: 2019 mes: 5 dia: 4 hora: 10.    " ocupado por 3 semanas "    self assert: (calendario estaOcupado: 'Pedro'                             enAnio: 2019 mes: 5 dia: 4 hora: 10).    self assert: (calendario estaOcupado: 'Pedro'                             enAnio: 2019 mes: 5 dia: 11 hora: 10).    self assert: (calendario estaOcupado: 'Pedro'                             enAnio: 2019 mes: 5 dia: 18 hora: 10).    " desocupado la cuarta semana "    self deny: (calendario estaOcupado: 'Pedro'                           enAnio: 2019 mes: 5 dia: 25 hora: 10).! !!PruebasCalendario methodsFor: 'test' stamp: 'TomasBustamante 9/16/2019 19:52'!test05AgregarRecursos    | calendario |	    calendario := Calendario new.	    self deny: (calendario existePersona: 'Pedro').    self deny: (calendario existeRecurso: 'Proyector').	    calendario agregarPersona: 'Pedro'.    calendario agregarRecurso: 'Proyector'.	    self assert: (calendario existeRecurso: 'Proyector').! !!PruebasCalendario methodsFor: 'test' stamp: 'TomasBustamante 9/16/2019 19:55'!test07PersonaAdmiteSuperposicion    | calendario |    calendario := Calendario new.    calendario agregarPersona: 'Pedro'.    calendario agregarEventoConNombre: 'Visitar oculista'               invitados: 	#('Pedro')	             enAnio: 2019 mes: 5 dia: 4 hora: 10.    self assert: (calendario estaOcupado: 'Pedro'                             enAnio: 2019 mes: 5 dia: 4 hora: 10).    calendario agregarEventoConNombre: 'Leer Las Venas abiertas de America Latina'               invitados: #('Pedro')               enAnio: 2019 mes: 5 dia: 4 hora: 10.    self assert: (calendario estaOcupado: 'Pedro'                             enAnio: 2019 mes: 5 dia: 4 hora: 10).! !!PruebasCalendario methodsFor: 'test' stamp: 'TomasBustamante 9/16/2019 20:11'!test09RemoverEvento    | calendario invitados |    invitados := OrderedCollection new.    invitados add: 'Pedro'.    calendario := Calendario new.    calendario agregarPersona: 'Pedro'.    calendario agregarEventoConNombre: 'Siesta'               invitados: invitados               enAnio: 2019 mes: 5 dia: 4 hora: 10.    self assert: (calendario estaOcupado: 'Pedro'                             enAnio: 2019 mes: 5 dia: 4 hora: 10).        calendario removerEvento: 'Siesta'.    self deny: (calendario estaOcupado: 'Pedro'                           enAnio: 2019 mes: 5 dia: 4 hora: 10).	    calendario agregarEventoSemanalConNombre: 'Gran Siesta'               semanas: 3               invitados: #('Pedro') " coleccion de un string "               enAnio: 2019 mes: 10 dia: 4 hora: 10.    " ocupado por 3 semanas "    self assert: (calendario estaOcupado: 'Pedro'                             enAnio: 2019 mes: 10 dia: 4 hora: 10).    self assert: (calendario estaOcupado: 'Pedro'                             enAnio: 2019 mes: 10 dia: 11 hora: 10).    self assert: (calendario estaOcupado: 'Pedro'                             enAnio: 2019 mes: 10 dia: 18 hora: 10).    " desocupado la cuarta semana "    self deny: (calendario estaOcupado: 'Pedro'                           enAnio: 2019 mes: 10 dia: 25 hora: 10).    calendario removerEvento: 'Gran Siesta'.    " desocupado las cuatro semanas "    self deny: (calendario estaOcupado: 'Pedro'                           enAnio: 2019 mes: 10 dia: 4 hora: 10).    self deny: (calendario estaOcupado: 'Pedro'                           enAnio: 2019 mes: 10 dia: 11 hora: 10).    self deny: (calendario estaOcupado: 'Pedro'                           enAnio: 2019 mes: 10 dia: 18 hora: 10).    self deny: (calendario estaOcupado: 'Pedro'                           enAnio: 2019 mes: 10 dia: 25 hora: 10).! !!PruebasCalendario methodsFor: 'test' stamp: 'TomasBustamante 9/16/2019 19:46'!test01AgregarPersonas    | calendario |	    calendario := Calendario new.	    self deny: (calendario existePersona: 'Juan').	    calendario agregarPersona: 'Juan'.	    self assert: (calendario existePersona: 'Juan').    self deny: (calendario existePersona: 'Pedro').! !!PruebasCalendario methodsFor: 'test' stamp: 'TomasBustamante 9/16/2018 20:20'!test04AgregarEventoSimpleConVariosInvitados    | calendario |    calendario := Calendario new.    calendario agregarPersona: 'Pedro'.    calendario agregarPersona: 'Pablo'.    calendario agregarPersona: 'Maria'.    calendario agregarEventoConNombre: 'Partida de ajedrez'               invitados: #('Pedro' 'Pablo') " Coleccion de strings "               enAnio: 2019 mes: 5 dia: 4 hora: 10.    self assert: (calendario estaOcupado: 'Pedro'                             enAnio: 2019 mes: 5 dia: 4 hora: 10).    self assert: (calendario estaOcupado: 'Pablo'                             enAnio: 2019 mes: 5 dia: 4 hora: 10).    self deny: (calendario estaOcupado: 'Maria'                           enAnio: 2019 mes: 5 dia: 4 hora: 10).! !!PruebasCalendario methodsFor: 'test' stamp: 'TomasBustamante 9/16/2018 20:20'!test02AgregarEventoSimple    | calendario invitados |    invitados := OrderedCollection new.    invitados add: 'Pedro'.    calendario := Calendario new.    calendario agregarPersona: 'Pedro'.    calendario agregarEventoConNombre: 'Siesta'               invitados: invitados               enAnio: 2019 mes: 5 dia: 4 hora: 10.    self assert: (calendario estaOcupado: 'Pedro'	                           enAnio: 2019 mes: 5 dia: 4 hora: 10).    self deny: (calendario estaOcupado: 'Pedro'                           enAnio: 2019 mes: 5 dia: 4 hora: 11).! !!PruebasCalendario methodsFor: 'test' stamp: 'TomasBustamante 9/16/2019 19:56'!test08RecursoNoAdmiteSuperposicion    | calendario invitados |    invitados := OrderedCollection new.    invitados add: 'Pedro'; add: 'Cama'.    calendario := Calendario new.    calendario agregarPersona: 'Pedro'.    calendario agregarRecurso: 'Cama'.    calendario agregarEventoSemanalConNombre: 'Siesta'               semanas: 2               invitados: invitados               enAnio: 2019 mes: 5 dia: 4 hora: 10.    self assert: (calendario estaOcupado: 'Cama'                             enAnio: 2019 mes: 5 dia: 11 hora: 10).    self should: [	      calendario agregarEventoConNombre: 'Gran siesta'	                 invitados: invitados	                 enAnio: 2019 mes: 5 dia: 11 hora: 10     ] raise: RecursoOcupadoError.! !!PruebasCalendario methodsFor: 'test' stamp: 'TomasBustamante 9/16/2018 20:20'!test06AgregarEventoConRecurso    | calendario |    calendario := Calendario new.    calendario agregarPersona: 'Pedro'.    calendario agregarPersona: 'Pablo'.    calendario agregarRecurso: 'Parrilla'.    calendario agregarEventoConNombre: 'Asado vegano'               invitados: #('Pedro' 'Pablo' 'Parrilla')               enAnio: 2019 mes: 5 dia: 4 hora: 10.	    self assert: (calendario estaOcupado: 'Pedro'                             enAnio: 2019 mes: 5 dia:4  hora: 10).    self assert: (calendario estaOcupado: 'Pablo'                             enAnio: 2019 mes: 5 dia:4  hora: 10).    self assert: (calendario estaOcupado: 'Parrilla'                             enAnio: 2019 mes: 5 dia:4  hora: 10).! !TestCase subclass: #PruebasEventoSemanal	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Tests'!!PruebasEventoSemanal methodsFor: 'tests' stamp: 'IgnacioChiappe 9/30/2018 11:13'!test01AgregarEventoSemanal	| eventoSemanal fecha persona invitados |	fecha := DateAndTime year: 2018 month: 9 day: 30 hour: 10 minute: 0.	persona := (Persona new) conNombre: 'Ignacio'.	invitados := OrderedCollection new.	invitados add: persona.	eventoSemanal := (EventoSemanal new) conNombre: 'Evento' conInvitados: invitados enFecha: fecha duranteSemanas: 8.		self assert: (persona estaOcupado: fecha).! !!PruebasEventoSemanal methodsFor: 'tests' stamp: 'IgnacioChiappe 9/30/2018 11:16'!test02BorrarEventoSemanal	| eventoSemanal fecha persona invitados |	fecha := DateAndTime year: 2018 month: 9 day: 30 hour: 10 minute: 0.	persona := (Persona new) conNombre: 'Ignacio'.	invitados := OrderedCollection new.	invitados add: persona.	eventoSemanal := (EventoSemanal new) conNombre: 'Evento' conInvitados: invitados enFecha: fecha duranteSemanas: 8.	eventoSemanal borrarEvento.		self deny: (persona estaOcupado: fecha).! !TestCase subclass: #PruebasEventoSimple	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Tests'!!PruebasEventoSimple methodsFor: 'tests' stamp: 'IgnacioChiappe 9/30/2018 11:17'!test01AgregarEventoSimple	| eventoSimple fecha persona invitados |	fecha := DateAndTime year: 2018 month: 9 day: 30 hour: 10 minute: 0.	persona := (Persona new) conNombre: 'Ignacio'.	invitados := OrderedCollection new.	invitados add: persona.	eventoSimple := (EventoSimple new) conNombre: 'Evento' conInvitados: invitados enFecha: fecha.		self assert: (persona estaOcupado: fecha).! !!PruebasEventoSimple methodsFor: 'tests' stamp: 'IgnacioChiappe 9/30/2018 11:17'!test02BorrarEventoSimple	| eventoSimple fecha persona invitados |	fecha := DateAndTime year: 2018 month: 9 day: 30 hour: 10 minute: 0.	persona := (Persona new) conNombre: 'Ignacio'.	invitados := OrderedCollection new.	invitados add: persona.	eventoSimple := (EventoSimple new) conNombre: 'Evento' conInvitados: invitados enFecha: fecha.	eventoSimple borrarEvento.		self deny: (persona estaOcupado: fecha).! !TestCase subclass: #PruebasPersona	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Tests'!!PruebasPersona methodsFor: 'tests' stamp: 'IgnacioChiappe 9/30/2018 11:23'!test02AgregarEventoAPersonaYEstaOcupada	| persona fecha |	persona := (Persona new) conNombre: 'Ignacio'.	fecha := DateAndTime year: 2018 month: 9 day: 30 hour: 10 minute: 0.	persona agregarEvento: 'Evento' enFecha: fecha.		self assert: (persona estaOcupado: fecha).! !!PruebasPersona methodsFor: 'tests' stamp: 'IgnacioChiappe 9/30/2018 11:24'!test03RemoverEventoAPersonaYNoEstaOcupada	| persona fecha |	persona := (Persona new) conNombre: 'Ignacio'.	fecha := DateAndTime year: 2018 month: 9 day: 30 hour: 10 minute: 0.	persona agregarEvento: 'Evento' enFecha: fecha.	persona removerEvento: fecha.		self deny: (persona estaOcupado: fecha).! !!PruebasPersona methodsFor: 'tests' stamp: 'IgnacioChiappe 9/30/2018 11:22'!test01CrearUnaPersonaYNoEstaOcupada	| persona fecha |	persona := (Persona new) conNombre: 'Ignacio'.	fecha := DateAndTime year: 2018 month: 9 day: 30 hour: 10 minute: 0.		self deny: (persona estaOcupado: fecha).! !TestCase subclass: #PruebasRecurso	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Tests'!!PruebasRecurso methodsFor: 'tests' stamp: 'IgnacioChiappe 9/30/2018 11:25'!test02AgregarEventoARecursoYEstaOcupado	| recurso fecha |	recurso := (Recurso new) conNombre: 'Proyector'.	fecha := DateAndTime year: 2018 month: 9 day: 30 hour: 10 minute: 0.	recurso agregarEvento: 'Evento' enFecha: fecha.		self assert: (recurso estaOcupado: fecha).! !!PruebasRecurso methodsFor: 'tests' stamp: 'IgnacioChiappe 9/30/2018 11:26'!test03RemoverEventoARecursoYEstaOcupado	| recurso fecha |	recurso := (Recurso new) conNombre: 'Proyector'.	fecha := DateAndTime year: 2018 month: 9 day: 30 hour: 10 minute: 0.	recurso agregarEvento: 'Evento' enFecha: fecha.	recurso removerEvento: fecha.		self deny: (recurso estaOcupado: fecha).! !!PruebasRecurso methodsFor: 'tests' stamp: 'IgnacioChiappe 9/30/2018 11:25'!test01CrearUnRecursoYNoEstaOcupado	| recurso fecha |	recurso := (Recurso new) conNombre: 'Proyector'.	fecha := DateAndTime year: 2018 month: 9 day: 30 hour: 10 minute: 0.		self deny: (recurso estaOcupado: fecha).! !